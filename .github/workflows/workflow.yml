name: Lint, Format, and Publish

on:
  push:
    branches:
      - master  # Adjust the branch name as needed

permissions:
  contents: write  # Grants write access to repository contents

jobs:
  lint-and-format:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]  # Specify the Python versions you want to test against

    steps:
      # This job performs the following actions:
      # 1. Checks out the repository.
      # 2. Sets up the specified Python version.
      # 3. Installs necessary dependencies (`isort`, `ruff`, `packaging`, and `build`).
      # 4. Sorts imports using `isort`.
      # 5. Formats the code using `ruff`.
      # 6. Lints the code with `ruff`.
      # 7. Updates Python versions using `github-action-python-versioner`.
      # 8. Commits and pushes any formatting changes back to the repository.

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required to push changes back

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install isort ruff packaging build

      - name: Sort Imports with isort
        run: isort ./funcversion

      - name: Format Code with Ruff
        run: ruff format ./funcversion

      - name: Lint Code with Ruff
        run: ruff check ./funcversion

      - name: Python Versioner
        uses: kurtmc/github-action-python-versioner@v1

      - name: Commit Formatted Code
        run: |
          # Configure Git with a bot user
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stage changes in the specified directory
          git add ./funcversion
          
          # Check if there are any changes to commit
          if ! git diff --cached --quiet; then
            # Commit changes with a message that includes [skip ci] to prevent triggering workflows again
            git commit -m "Apply formatting changes with Ruff and isort [skip ci]"
            # Push changes back to the repository securely using GITHUB_TOKEN
            git push
          else
            echo "No formatting changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: lint-and-format  # Ensures this job runs after lint-and-format succeeds
    runs-on: ubuntu-latest
    environment: release  # Associates this job with the 'release' environment

    steps:
      # This job performs the following actions:
      # 1. Checks out the repository.
      # 2. Sets up Python.
      # 3. Installs necessary dependencies (`build` and `twine`).
      # 4. Builds the package.
      # 5. Publishes the package to PyPI.

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Build and Twine
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Package
        run: python -m build

      - name: Publish to PyPI
        run: |
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
